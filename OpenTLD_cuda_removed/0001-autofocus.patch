From d7c5469eaa2eaa1697775795d356ae8e9af0671d Mon Sep 17 00:00:00 2001
From: Xiuli Pan <xiuli.pan@intel.com>
Date: Thu, 5 Jun 2014 07:58:36 +0800
Subject: [PATCH 1/3] autofocus

---
 src/libopentld/imacq/ImAcq.cpp |   4 +-
 src/opentld/main/Main.cpp      | 156 +++++++++++++++++++++++++++++++++++++++--
 2 files changed, 153 insertions(+), 7 deletions(-)

diff --git a/src/libopentld/imacq/ImAcq.cpp b/src/libopentld/imacq/ImAcq.cpp
index 94b6fb6..dfa4b61 100644
--- a/src/libopentld/imacq/ImAcq.cpp
+++ b/src/libopentld/imacq/ImAcq.cpp
@@ -39,7 +39,9 @@ void imAcqInit(ImAcq *imAcq)
 {
     if(imAcq->method == IMACQ_CAM)
     {
-        imAcq->capture = cvCaptureFromCAM(imAcq->camNo);
+//         imAcq->capture = cvCaptureFromCAM(imAcq->camNo);
+        imAcq->capture = cvCaptureFromCAM(1);
+//         printf("opening the cam%d\n\n\n",imAcq->camNo);
 
         if(imAcq->capture == NULL)
         {
diff --git a/src/opentld/main/Main.cpp b/src/opentld/main/Main.cpp
index 40e1ee8..f5aef80 100644
--- a/src/opentld/main/Main.cpp
+++ b/src/opentld/main/Main.cpp
@@ -30,11 +30,76 @@
 #include "Gui.h"
 #include "TLDUtil.h"
 #include "Trajectory.h"
+#include "../../libopentld/tld/TLD.h"
 #include "Timing.h"
-
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <errno.h>
+#include <fcntl.h> 
+#include <linux/videodev2.h>
+#define CLEAR(x) memset(&(x), 0, sizeof(x))
 using namespace tld;
 using namespace cv;
 
+double contrast_measure(const Mat&img)
+{
+    Mat dx,dy;
+    cv::Sobel(img,dx,CV_32F,1,0,3);
+    cv::Sobel(img,dy,CV_32F,0,1,3);
+    cv::magnitude(dx,dy,dx);
+    return sum(dx)[0]/(img.cols*img.rows);
+}
+static int xioctl(int fh, int request, void *arg)
+{
+        int r;
+
+        do {
+                r = ioctl(fh, request, arg);
+        } while (-1 == r && EINTR == errno);
+
+        return r;
+}
+void disableAutoFocus(int fh)
+{
+    struct v4l2_ext_controls ext_ctrls;
+    struct v4l2_ext_control ext_ctrl;
+    CLEAR(ext_ctrls);
+    CLEAR(ext_ctrl);
+    ext_ctrl.id = V4L2_CID_FOCUS_AUTO;
+    ext_ctrl.value = 0;
+    ext_ctrls.ctrl_class = V4L2_CTRL_ID2CLASS(ext_ctrl.id);
+    ext_ctrls.count = 1;
+    ext_ctrls.controls = &ext_ctrl;
+    if (-1 == xioctl (fh,VIDIOC_S_EXT_CTRLS, &ext_ctrls))
+    {
+    perror ("VIDIOC_S_EXT_CTRLS");
+        printf("Failed disable autofocus \n");
+        exit (EXIT_FAILURE);
+    }
+    else printf("Disable autofocus successfully\n");
+}
+
+static void setFocus(int fh,int focus)
+{
+    struct v4l2_ext_controls ext_ctrls;
+    struct v4l2_ext_control ext_ctrl;
+    CLEAR(ext_ctrls);
+    CLEAR(ext_ctrl);
+  
+    ext_ctrl.id = V4L2_CID_FOCUS_ABSOLUTE;
+    ext_ctrl.value = focus;
+    ext_ctrls.ctrl_class = V4L2_CTRL_ID2CLASS(ext_ctrl.id);
+    ext_ctrls.count = 1;
+    ext_ctrls.controls = &ext_ctrl;
+    if (-1 == xioctl (fh,VIDIOC_S_EXT_CTRLS, &ext_ctrls))
+    {
+        perror ("VIDIOC_S_EXT_CTRLS");
+        printf("Failed set V4L2_CID_FOCUS_ABSOLUTE \n");
+        exit (EXIT_FAILURE);
+    }
+    else printf("Set focus to %d successfully\n",focus);
+}
+
 void Main::doWork()
 {
 	Trajectory trajectory;
@@ -103,7 +168,15 @@ void Main::doWork()
         skipProcessingOnce = true;
         reuseFrameOnce = true;
     }
-
+    //Focus init
+    const char* dev_name = "/dev/video1";
+    int fh = open(dev_name, O_RDWR /* required */ | O_NONBLOCK, 0);
+    disableAutoFocus(fh);
+    int focus = 0;
+    double bestsharpness=0,lastsharpness;
+    int bestfocus=0,lastsize,focusCount=0,focusChange = 0;
+    bool init = false;
+    setFocus(fh,focus);
     while(imAcqHasMoreFrames(imAcq))
     {
         tick_t procInit, procFinal;
@@ -126,7 +199,7 @@ void Main::doWork()
         if(!skipProcessingOnce)
         {
             getCPUTick(&procInit);
-            tld->processImage(img);
+            tld->processImage(img);//
             getCPUTick(&procFinal);
             PRINT_TIMING("FrameProcTime", procInit, procFinal, "\n");
         }
@@ -171,12 +244,12 @@ void Main::doWork()
             CvScalar blue = CV_RGB(0, 0, 255);
             CvScalar black = CV_RGB(0, 0, 0);
             CvScalar white = CV_RGB(255, 255, 255);
-
+            Rect currRect=Rect(160,120,320,240);
             if(tld->currBB != NULL)
             {
                 CvScalar rectangleColor = (confident) ? blue : yellow;
                 cvRectangle(img, tld->currBB->tl(), tld->currBB->br(), rectangleColor, 8, 8, 0);
-
+                currRect = *(tld->currBB); 
 				if(showTrajectory)
 				{
 					CvPoint center = cvPoint(tld->currBB->x+tld->currBB->width/2, tld->currBB->y+tld->currBB->height/2);
@@ -194,7 +267,55 @@ void Main::doWork()
 			{
 				trajectory.drawTrajectory(img);
 			}
+			Mat imgt = img;
+            double sharpness = contrast_measure(imgt(currRect));//TODO
+            printf("sharpness is %lf\n",sharpness);
+            if(!init)
+            {
+                if(lastsharpness < sharpness)
+                {
+                    bestsharpness = sharpness > bestsharpness ? sharpness : bestsharpness;
+                    lastsharpness = sharpness;
+                    bestfocus = sharpness > bestsharpness ? focus : bestfocus;
+                    lastsize = currRect.height;
+                }
+                focus+=10;
+                setFocus(fh,focus);
+                if(focus > 180){
+                    init = true;
+                    setFocus(fh,bestfocus);
+                    focus = bestfocus;
+                }
+            }
+            else
+            {                
+                if(currRect.height >=lastsize && (focusCount %3==0))
+                {
+                    lastsize = currRect.height;
+                    focusChange = 2;
+                    focusCount = 0;
+                    focus=bestfocus;
+                }
+                else if(currRect.height < lastsize && (focusCount %3==0))
+                {
+                    lastsize = currRect.height;
+                    focusChange = -2;
+                    focusCount = 0;
+                    focus = bestfocus;
+                }
+                else if(sharpness > bestsharpness)
+                {
+                    bestfocus = focus;
+                    bestsharpness = sharpness;
+                }
+
+                focus+=focusChange;
+                focus = focus > 0? focus: 0;
+                focusCount++;
+//                 printf("focusCOunt is %d, focuschange is %d\n",focusCount,focusChange);
+                setFocus(fh,focus);
 
+            }
             CvFont font;
             cvInitFont(&font, CV_FONT_HERSHEY_SIMPLEX, .5, .5, 0, 1, 8);
             cvRectangle(img, cvPoint(0, 0), cvPoint(img->width, 50), black, CV_FILLED, 8, 0);
@@ -235,7 +356,30 @@ void Main::doWork()
                     }
                 }
                 */
-
+                if(key == 82)
+                {   
+                focus+=1;
+//                 cout<<focus<<endl;
+                setFocus(fh,focus);
+                }
+                if(key == 84)
+                {
+                focus-=1;
+//                 cout<<focus<<endl;
+                setFocus(fh,focus);
+                }
+                if(key == 81)
+                {   
+                focus-=10;
+//                 cout<<focus<<endl;
+                setFocus(fh,focus);
+                }
+                if(key == 83)
+                {
+                focus+=10;
+//                 cout<<focus<<endl;
+                setFocus(fh,focus);
+                }
                 if(key == 'c')
                 {
                     //clear everything
-- 
1.8.3.2

