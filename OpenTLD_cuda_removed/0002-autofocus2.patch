From b66a3fd5f0456e789f12c93187c2b9dee9385456 Mon Sep 17 00:00:00 2001
From: Xiuli Pan <xiuli.pan@intel.com>
Date: Sun, 8 Jun 2014 12:11:12 +0800
Subject: [PATCH 2/3] autofocus2

---
 src/libopentld/tld/TLD.cpp                      |   4 +-
 src/libopentld/tld/detector/DetectorCascade.cpp |   2 +-
 src/opentld/main/Main.cpp                       | 165 +++++++++++++++---------
 3 files changed, 110 insertions(+), 61 deletions(-)

diff --git a/src/libopentld/tld/TLD.cpp b/src/libopentld/tld/TLD.cpp
index dd38329..6890b8e 100644
--- a/src/libopentld/tld/TLD.cpp
+++ b/src/libopentld/tld/TLD.cpp
@@ -126,7 +126,7 @@ void TLD::processImage(const Mat &img)
         getCPUTick(&procInit);
         medianFlowTracker->track(prevImg, currImg, prevBB);
         getCPUTick(&procFinal);
-        PRINT_TIMING("TrackTime", procInit, procFinal, ", ");
+//         PRINT_TIMING("TrackTime", procInit, procFinal, ", ");
     }
 
     if(detectorEnabled && (!alternating || medianFlowTracker->trackerBB == NULL))
@@ -134,7 +134,7 @@ void TLD::processImage(const Mat &img)
         getCPUTick(&procInit);
         detectorCascade->detect(grey_frame);
         getCPUTick(&procFinal);
-        PRINT_TIMING("DetecTime", procInit, procFinal, ", ");
+//         PRINT_TIMING("DetecTime", procInit, procFinal, ", ");
     }
 
 
diff --git a/src/libopentld/tld/detector/DetectorCascade.cpp b/src/libopentld/tld/detector/DetectorCascade.cpp
index 43dae9e..8908b71 100644
--- a/src/libopentld/tld/detector/DetectorCascade.cpp
+++ b/src/libopentld/tld/detector/DetectorCascade.cpp
@@ -345,7 +345,7 @@ void DetectorCascade::detect(const Mat &img)
     }
     std::cout << numWindows << " - " << j << " - " << k << " ";
     getCPUTick(&procFinal);
-    PRINT_TIMING("ClsfyTime", procInit, procFinal, ", ");
+//     PRINT_TIMING("ClsfyTime", procInit, procFinal, ", ");
 
     //Cluster
     clustering->clusterConfidentIndices();
diff --git a/src/opentld/main/Main.cpp b/src/opentld/main/Main.cpp
index f5aef80..29a27b3 100644
--- a/src/opentld/main/Main.cpp
+++ b/src/opentld/main/Main.cpp
@@ -99,7 +99,12 @@ static void setFocus(int fh,int focus)
     }
     else printf("Set focus to %d successfully\n",focus);
 }
-
+static int getFocus(int currsize,int lastsize,int bestfocus)
+{
+    if(bestfocus < 20) return currsize-lastsize;
+    else return (float)currsize/(float)lastsize*bestfocus;
+    
+}
 void Main::doWork()
 {
 	Trajectory trajectory;
@@ -173,9 +178,9 @@ void Main::doWork()
     int fh = open(dev_name, O_RDWR /* required */ | O_NONBLOCK, 0);
     disableAutoFocus(fh);
     int focus = 0;
-    double bestsharpness=0,lastsharpness;
-    int bestfocus=0,lastsize,focusCount=0,focusChange = 0;
-    bool init = false;
+    double bestsharpness=0,lastsharpness=0;
+    int bestfocus=0,initsize,lastsize,focusCount=0,focusChange = 0,initfocus = 0,errorcount=0,focusend=80;
+    bool init = false,changing = false;
     setFocus(fh,focus);
     while(imAcqHasMoreFrames(imAcq))
     {
@@ -201,7 +206,7 @@ void Main::doWork()
             getCPUTick(&procInit);
             tld->processImage(img);//
             getCPUTick(&procFinal);
-            PRINT_TIMING("FrameProcTime", procInit, procFinal, "\n");
+//             PRINT_TIMING("FrameProcTime", procInit, procFinal, "\n");
         }
         else
         {
@@ -241,15 +246,103 @@ void Main::doWork()
 
             sprintf(string, "#%d,Posterior %.2f; fps: %.2f, #numwindows:%d, %s", imAcq->currentFrame - 1, tld->currConf, fps, tld->detectorCascade->numWindows, learningString);
             CvScalar yellow = CV_RGB(255, 255, 0);
-            CvScalar blue = CV_RGB(0, 0, 255);
+            CvScalar blue = CV_RGB(0, 0, 255);  
             CvScalar black = CV_RGB(0, 0, 0);
             CvScalar white = CV_RGB(255, 255, 255);
-            Rect currRect=Rect(160,120,320,240);
+            Mat imgt = img;
+            Rect currRect;
             if(tld->currBB != NULL)
             {
                 CvScalar rectangleColor = (confident) ? blue : yellow;
                 cvRectangle(img, tld->currBB->tl(), tld->currBB->br(), rectangleColor, 8, 8, 0);
-                currRect = *(tld->currBB); 
+                
+                currRect = *(tld->currBB);
+                double sharpness = contrast_measure(imgt(currRect));//TODO
+                printf("sharpness is %lf\n",sharpness);
+                if(!init)
+                {
+                    if(lastsharpness < sharpness)
+                    {   
+                        printf("sharpness is %lf,lastsharpness is %lf,focus is %d,bestfocus is %d\n",sharpness,lastsharpness,focus,bestfocus);
+                        if(sharpness > bestsharpness)
+                        {
+                            bestsharpness = sharpness;
+                            bestfocus = focus;
+                        }
+                        lastsharpness = sharpness;
+                    }
+                    focus+=2;
+
+                    if(focus > focusend){
+                        init = true;
+                        focus = bestfocus;
+                        initfocus = bestfocus;
+                        printf("bestfocus is %d \n",bestfocus);
+                        initsize = currRect.height;
+                        lastsize = initsize;
+                    }
+                    setFocus(fh,focus);
+                }
+                else
+                {
+                    printf("autofocus is %d,size is %d\n",focus,lastsize);
+                    focusCount++;
+                    errorcount+= abs(currRect.height-lastsize);
+                    lastsize = currRect.height;
+                    if(focusCount%10 == 0)
+                    {
+//                         printf("distense is %d,errorcount is %d\n",lastsize-initsize,errorcount);
+                        if(errorcount < 5 && abs(lastsize-initsize)>5)
+                        {
+                            init = false;
+                            bestsharpness = 0;
+                            lastsharpness = 0;
+                            if(currRect.height >initsize){
+//                                 focus = initfocus + (currRect.height-initsize)/10;
+//                                 focusend=focus +(currRect.height-initsize)/2;
+                              focus = getFocus(currRect.height,initsize,focus)-20;
+                              focusend = focus + 20;
+//                                 printf("XXXXXXXXx!focusend is %d\n",focusend);
+                            }
+                            else
+                            {
+                                focusend = focus;
+                                focus = 0;
+                            }
+
+                        }
+                        errorcount=0;
+                        focusCount=0;
+                    }                    
+                }
+//                 {
+// //                    if(abs(currRect.height-lastsize) > 5)
+// //                    {
+// //                        printf("XXXX!\n");
+// //                        focus=getFocus(currRect.height,lastsize,initfocus,bestfocus);
+// //                    }
+// //                     printf("lastsize is %d",lastsize);
+//                     if(focusCount %5==0)
+//                     {
+//                         focusChange = currRect.height < lastsize ? -1:1;
+//                         focusCount = 0;
+//                         focus=getFocus(currRect.height,initsize,initfocus,bestfocus);
+// //                         printf("init focus is %d, best focus is %d, focus is %d\n",initfocus,bestfocus,focus);
+//                         bestsharpness = sharpness;
+//                     }
+//                     else if(sharpness > bestsharpness)
+//                     {
+//                         bestfocus = focus;
+//                         bestsharpness = sharpness;
+//                     }
+//                     focus += focusChange;
+//                     focus = focus > 0? focus: 0;
+//                     focusCount++;
+//                         
+//                     }
+// //                 printf("focusCOunt is %d, focuschange is %d\n",focusCount,focusChange);
+// //                 setFocus(fh,focus);
+//                 }
 				if(showTrajectory)
 				{
 					CvPoint center = cvPoint(tld->currBB->x+tld->currBB->width/2, tld->currBB->y+tld->currBB->height/2);
@@ -267,55 +360,6 @@ void Main::doWork()
 			{
 				trajectory.drawTrajectory(img);
 			}
-			Mat imgt = img;
-            double sharpness = contrast_measure(imgt(currRect));//TODO
-            printf("sharpness is %lf\n",sharpness);
-            if(!init)
-            {
-                if(lastsharpness < sharpness)
-                {
-                    bestsharpness = sharpness > bestsharpness ? sharpness : bestsharpness;
-                    lastsharpness = sharpness;
-                    bestfocus = sharpness > bestsharpness ? focus : bestfocus;
-                    lastsize = currRect.height;
-                }
-                focus+=10;
-                setFocus(fh,focus);
-                if(focus > 180){
-                    init = true;
-                    setFocus(fh,bestfocus);
-                    focus = bestfocus;
-                }
-            }
-            else
-            {                
-                if(currRect.height >=lastsize && (focusCount %3==0))
-                {
-                    lastsize = currRect.height;
-                    focusChange = 2;
-                    focusCount = 0;
-                    focus=bestfocus;
-                }
-                else if(currRect.height < lastsize && (focusCount %3==0))
-                {
-                    lastsize = currRect.height;
-                    focusChange = -2;
-                    focusCount = 0;
-                    focus = bestfocus;
-                }
-                else if(sharpness > bestsharpness)
-                {
-                    bestfocus = focus;
-                    bestsharpness = sharpness;
-                }
-
-                focus+=focusChange;
-                focus = focus > 0? focus: 0;
-                focusCount++;
-//                 printf("focusCOunt is %d, focuschange is %d\n",focusCount,focusChange);
-                setFocus(fh,focus);
-
-            }
             CvFont font;
             cvInitFont(&font, CV_FONT_HERSHEY_SIMPLEX, .5, .5, 0, 1, 8);
             cvRectangle(img, cvPoint(0, 0), cvPoint(img->width, 50), black, CV_FILLED, 8, 0);
@@ -418,7 +462,12 @@ void Main::doWork()
                     }
 
                     Rect r = Rect(box);
-
+                    currRect=r;
+                    initsize = r.height;
+                    init = false;
+                    bestsharpness = 0;
+                    lastsharpness = 0;
+                    focus = 0;
                     tld->selectObject(grey, &r);
                 }
             }
-- 
1.8.3.2

