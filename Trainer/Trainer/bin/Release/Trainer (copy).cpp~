//the directory to look for images in
const char *POS_IMAGES_DIR = "./pos/";
const char *POS_IMAGES_FOLDER = "pos/";
//the file extention we use
const char *IMAGES_FORMAT = "*.jpg";
//the log file name
const char *LOG_FILE_NAME = "./pos.txt";
//name of the app window

    #include <iostream>
    #include <fstream>
    #include <stdio.h>
    #include <stdlib.h>
    #include <string>
    #include <vector>
    #include <stdio.h>  
    #include <cv.h>  
    #include <cxcore.h>  
    #include <highgui.h>
    #include <string>  

//include the opencv library
#include "opencv2/opencv.hpp"
//tinydir file utils - https://github.com/cxong/tinydir
#include "tinydir.h"


using namespace std;
using namespace cv;

//the index of the current image
int currentIndex = -1;
int currentLogIndex = 0;
string currentImageFile;
//we'll hold the directory data here
vector<string> posLabels;
//a rectangle to masure the mouse movement
//the matrix we'll use to display the images
Mat currentImage;
Mat sourceMat;

//=================================
// std string - int conversion methods
template <typename T> string toString(T t){
    ostringstream out;
    out << t;
    return out.str();
}

template <typename T> T fromString(string t){
    T out;
    istringstream in(t);
    in >> out;
    return out;
}
//=================================

//forward decleration
void loadNext();

//list all files in a directory using tinydir
//we'll use this to read all the files in the pos images folder
void listDir(const char *destination, vector<string> &labels ) {

    tinydir_dir dir;
    //check if the directory exist or return an error
	if (tinydir_open(&dir, destination) == -1){
        printf("%s", destination);
		perror("Error opening file");
		goto bail;
	}

    //loop through what we have found in the dir
	while (dir.has_next) {
		tinydir_file file;
		if (tinydir_readfile(&dir, &file) == -1){
			perror("Error getting file");
			goto bail;
		}

		if (file.is_dir){
//          ignore sub folders
//			printf("/");
		} else {
//            printf("%s", file.name);
//            push the file name into the labels array
            labels.push_back( file.name );
		}
//		printf("\n");
//        check the next file
		tinydir_next(&dir);
	}

//    we'll triger this in case of errors
    bail:
        tinydir_close(&dir);

}


//load the log file and return the value of the last saved index
//note that we are usign the lines loop to count the index
int getLastSavedLogIndex() {

    ifstream file;
    string filename = LOG_FILE_NAME;
    file.open(filename.c_str());

    int index = 0;
    string line;
    while(getline(file,line)){
        if ( line !=  "" && line != "\n" ) {
            index++;
        }
    }
    return index;


}

// save the current image in the following format
// dir/filename.ext index x y x+w y+h
// pos/img1.jpg  1  140 100 45 45
void saveCurrentImage() {
//construct a string based on the current file name, index and the mouse box rect
  string out = toString(POS_IMAGES_FOLDER) + currentImageFile +"  " + toString(1 )+ "  " + toString(0) + " " + toString(0) + " " + toString(50) + " " + toString(50);
  ofstream myfile;
  myfile.open (LOG_FILE_NAME, fstream::in | fstream::out | fstream::app);
  myfile << out + "\n";
  myfile.close();
}


//load an image and set it as the current one
void loadImage(String filename) {
    sourceMat = imread(filename, 1);
    sourceMat.copyTo(currentImage);
}

//load the next item on the list
//or shutdown the app if the training is completed
void loadNext() {

    int len = posLabels.size();
    cout << currentLogIndex << " " << currentIndex << " - " << len << endl;
    if ( currentIndex <= len - 1 ) {
        //up the indexes
        currentLogIndex++;
        currentIndex++;
        cout << "loading image " <<  currentIndex + 1  << " of " << len << endl;
        stringstream  stream(posLabels.at(currentIndex));
        stream >> currentImageFile;
        loadImage(POS_IMAGES_DIR + currentImageFile);
    } else if ( currentIndex > len ) {
        //done with training, lets shutdown.
        cout << "--> Training completed " << currentIndex + 1 << " of " << len << endl;
    }
}


int main(int argc, char *argv[]) {

    //list the files in our pos images dir
    listDir(POS_IMAGES_DIR, posLabels);

    //load the last index saved
    currentLogIndex = getLastSavedLogIndex();
    currentIndex = currentLogIndex - 1;

    //load the next - first item
    loadNext();

    while (true) {
        int key = waitKey(200);
        if (key == 27) break;
    }

    return 0;
}
